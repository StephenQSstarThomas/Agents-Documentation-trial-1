üòÑGetting Started with Fun
=========================

Try our demo in your terminal 

1. Open your terminal üñ•Ô∏è

2. Get the Repository üì¶
   ::
   
      git clone https://github.com/aiwaves-cn/agents.git

3. Install the requirements üõ†Ô∏è
   ::
   
   pip install -r requirements.txt

4. Set the config üõ†Ô∏è
.. code-block:: json

   Modify example/{Muti|Single_Agent}/{target_agent}/config.json
   // only used for shopping assistant
   {
       MIN_CATEGORY_SIM  =  "0.7"  ##Threshold for category matching
       TOY_INFO_PATH  = "[\"your_path1\",\"your_path2_\"......]" #Path to the product database
       FETSIZE  =  "5" #Number of recommended products at a time

       #for all agents
       API_KEY  =  #Your API KEY
       PROXY  =  #Your proxy
       MAX_CHAT_HISTORY  =  "8" #Longest History
       User_Names = "[\"{user_name}\"]" # the name of agents which you want to play  
   }

   Notice that if you want to use WebSearchComponent, you also need set the config!
   "WebSearchComponent": {
       "engine_name": "bing",
       "api": {
           "google": {
               "cse_id": "Your cse_id",
               "api_key": "Your api_key"
           },
           "bing": "Your bing key"
       }
   }

Deploy our demo on the backend:point_down:

1. Prepare your front-end webpageüåê
2. DeployüöÄ
   Please refer to run.py for details
   We used fast_api to deployüå∂Ô∏è

.. code-block:: bash

   cd examples
   python run_backend.py --agent Single_Agent/shopping_assistant/muti_shop.json --config Single_Agent/shopping_assistant/config.yaml  --port your_port --router your_api_router

Get started with our Agents!

üß† How to write a modulized JSON file?

Preview
~~~~~
In this passage, we will show you how to write a modulized JSON file, which is of vital significance in generating the Agents.

Part 0: Template
~~~~~~~~~~~~~~~~
The following codes are a typical template for wrting JSON Files.(Please refer to template.py)

.. code-block:: json

   ## default { "temperature": 0.3, "model": "gpt-3.5-turbo-16k-0613","log_path": "logs/{your name}"}
   LLM = {
       "temperature": 0.0,
       "model": "gpt-3.5-turbo-16k-0613",
       "log_path": "logs/god"
   }

   Agents = {
       "Lilong" : {
           "style" : "professional",
           "roles" : {
               "company" : "coder",
               "state2" : "role2",
           },
       "name2" : {   
           "style" : "professional",
               "roles" : {
                   "company" : "coder",
                   "state2" : "role2",
               },
           }
       }
   }

   # indispensable parameter:  "controller_type"Ôºà"order","random","rule"Ôºâ
   controller = {
       "controller_type": "order",
       "max_chat_nums" : 12,
       "judge_system_prompt": "",
       "judge_last_prompt": "",
       "judge_extract_words": "end",
       "call_system_prompt" : "",
       "call_last_prompt": "",
       "call_extract_words": ""
   }

   Agent_state = {
       "role": {
       "LLM_type": "OpenAI",
       "LLM": LLM,
       "style": {
           "role": "Opening Advocate for the Affirmative",
           "style": "professional"
       },
       "task": {
           "task": ""
       },
       "rule": {
           "rule": ""
       }
   },
   }

   # indispensable parameter:  "name" and "agent_states"
   State = {
       "controller": controller,
       "begin_role": "",
       "begin_query": "",
       "environment_prompt": "",
       "name": "state1",
       "roles": ["role1","role2"],
       "LLM_type": "OpenAI",
       "LLM": LLM,
       "agent_state" : Agent_state,
   }

   States = {
       "end_state":{
               "name":"end_state",
               "agent_states":{}
           },
       "state1" : State
   }

   # default finish_state_name is "end_state"
   SOP = {
       "config" : {
       "API_KEY" : "Your key",
       "PROXY" : "Your PROXY",
       "MAX_CHAT_HISTORY" : "5",
       "User_Names" : "[\"alexander\"]"
       },
       "environment_type" : "competive",
       "LLM_type": "OpenAI",
       "LLM" :LLM,
       "root": "state1",
       "finish_state_name" : "end_state",
       "relations": {
           "state1": {
               "0": "state1",
               "1": "state2"
           },
           "state2":{
               "0":"state2",
               "1":"end_state"
           }
       },
       "agents": Agents,
       "states": States,
   }
~~~~~


   (written by JSON master longli)

Part 1: Remark on some of the attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


- SOP consists of State and Agent.

- State: The basic unit of SOP can be considered as a task or a scene, that is, a place where all Agents need to work together. It stores the tasks that agents with different identities need to complete.
  (Note: The task is given to the agent with a specific identity rather than the agent with a specific name)

  States: Stores all states.
  - name: The ONLY signal of one particular State in a certain SOP.
  - Controller: Determine whether the current state ends based on its system prompt and last prompt, which State should be entered next, and which Agent the task should be assigned to.
  - begin_role & begin_query: The Agent who should speak and the corresponding words when entering the scene for the first time.
  - environment_prompt: Responsible for explaining the overall situation of the current State; it will be added before the system prompt of all Agents in the current scene.
  - roles: All roles in the current state.

- Agent_state: Component of different agents in this state.
  - style & task & rules & demonstration & CoT & Output: Please refer to PromptComponent part, which is aforementioned.
  - KnowledgeBaseComponent: Please refer to ToolComponent part, which is also mentioned above.

- SOP: Fundamental attributes of the SOP graph.
  - active_mode: Decide whether the state should actively ask questions.
  - root: The beginning State.
  - relation: Relations between states. On the left is the certain output from one particular state, and on the right is the connected state which matches the output.
  - environment_type: Agent in different states do not share memory when competing, but share memory when coordinate is used.


Part 2: Examples
~~~~~~~~~~~~~~~~

Please refer to our Agents Demonstrations for more information. You can use them as reference.

Single-Agent Mode: 
----------------------------

Oculist Agent‚ÄîMedical Use:
^^^^^^^^^^^^^^^^^^^^^^^^^

Model Description
~~~~~~~~~~~~~~~~~

The oculist agent acts as a consultant, providing professional advice and enabling online reservations for patients.

How to run our Raw Model
~~~~~~~~~~~~~~~~~~~~~~~~

- If you want to simply talk to our given Oculist agent, please run these codes:

  .. code-block:: bash

     cd examples
     python run.py --agent Single_Agent/Oculist_Agent/config.json

- If you want to run it in the gradient interface:

  .. code-block:: bash

     cd examples
     python run_gradio.py --agent Single_Agent/Oculist_Agent/config.json

- You can easily change the agent by changing the (--agent and --config) parameters.

- üß† If you want to generate other customized agents, please follow our instructions above.


SOP Demonstration:
~~~~~~~~~~~~~~~~~~

The SOP of our Oculist Agent is shown below:

[Image]

Explanations:

The SOP of the Oculist Agent consists of four states, each finishing their parts of the whole workflow.

- knowledge_base state: Provide expertised suggestions for patients, offering guidance to the hospital.
- book_card state: Send the information card for patients to fill in and offer reservation in advance.
- welcome_end state: Respond to other questions such as 'How can I get to the hospital?', 'When should I come?', etc.
- response_end state: Send particular messages, ending the whole conversation.

The typical JSON File of the Oculist Agent is shown as follows:

.. code-block:: json
{ 
  "config":{
    "API_KEY" : "API_KEY",
    "PROXY" : "PROXY",
    "MAX_CHAT_HISTORY" : "5",
    "MIN_CATEGORY_SIM" : "0.7",
    "FETSIZE" : "3",
    "User_Names" : "[\"Agod\"]",
    "Embed_Model" : "intfloat/multilingual-e5-large"
  },
  "LLM_type": "OpenAI",
  "LLM": {
    "temperature": 0.3,
    "model": "gpt-3.5-turbo-16k-0613",
    "log_path": "logs/god"
  },
  "root": "knowledge_response",
  "relations": {
    "knowledge_response": {
      "1": "knowledge_response_book_card",
      "0": "knowledge_response"
    },
    "knowledge_response_book_card": {
      "1": "end",
      "0": "knowledge_response_book_card"
    },
    "end": {
      "0": "knowledge_response_end"
    },
    "knowledge_response_end": {
      "0": "knowledge_response_end"
    }
  },
  "agents": {
    "Wu Jialong": {
      "style":"humorous",
      "roles":{
      "knowledge_response": "Oculist",
      "knowledge_response_book_card": "Oculist",
      "knowledge_response_end": "Oculist",
      "end": "Oculist"
      }
    },
    "Agod": {
      "style":"Cold and cunning",
      "roles":{
      "knowledge_response": "Customer",
      "knowledge_response_book_card": "Customer",
      "knowledge_response_end": "Customer",
      "end": "Customer"
      }
    }
  },
  "states": {
    "knowledge_response": {
      "name": "knowledge_response",
      "roles": [
        "Oculist",
        "Customer"
      ],
      "begin_role":"Oculist",
      "begin_query" :"Welcome to consult, do you have any questions?",
      "agent_states": {
        "Oculist": {
          "style": {
            "role": "Eye hospital customer service"
          },
          "task": {
            "task": "Guide the user to go to the hospital for an examination and answer questions related to my hospital."
          },
          "rule": {
            "rule": "Your language should be concise and avoid excessive words. You need to guide me repeatedly. When the user explicitly refuses to visit the hospital, inquire about their concerns and encourage them to come for consultation, such as: \"Do you have any concerns?\" or \"Our hospital has highly professional doctors who you can discuss with in person.\" When the user expresses doubts with responses like \"I'll think about it,\" \"I'll consider it,\" or \"I need to see more,\" introduce the advantages of the hospital and guide them to come for consultation. Remember, after responding to me, guide me to visit your hospital for an examination."
          },
          "KnowledgeBaseComponent": {
            "top_k": 1,
            "type": "QA",
            "knowledge_path": "Single_Agent/Oculist_Agent/database.json"
          }
        },
        "Customer":{
        }
      },
      "controller": {
        "controller_type":"order",
        "judge_system_prompt": "What you need to do now is determine whether the user agrees to go to the hospital. Based on the user's answer and combined with previous conversations, it is determined whether the user agrees to go to the hospital. \nIf the user agrees to go to the hospital, you need to return <end>1</end>, if not, you need to return <end>0</end>. \nYou need to pay special attention to what the Assistant and user said in the context. When the user answers OK, uh-huh, no more questions, etc., return <end>1</end>",
        "judge_last_prompt": "Please contact the above to extract <end> and </end>. Do not perform additional output. Please strictly follow the above format for output! Remember, please strictly follow the above format for output!",
        "judge_extract_words": "end"
      }
    },
    "knowledge_response_book_card": {
      "name": "knowledge_response_book_card",
      "roles": [
        "Oculist",
        "Customer"
      ],
      "agent_states": {
        "Oculist": {
          "style": {
            "role": "Eye hospital customer service"
          },
          "task": {
            "task": "Guide users to fill out appointment cards and answer hospital-related questions"
          },
          "rule": {
            "rule": "Your language should be as concise as possible, without too much nonsense. The copy of the invitation card is: Please copy and fill in the following information and send it to me to complete the reservation. \n[Name]:\n[Telephone]:\n[Your approximate location]: District Degree]: \n The preoperative examination process includes mydriasis. After mydriasis, your vision will be blurred for 4-6 hours, which affects driving safety, so please do not drive to the hospital by yourself, and arrange your personal itinerary after the examination. You need to repeatedly invite users to fill out invitation cards. When users are chatting, euphemistic replies guide users to fill in the appointment card, such as: \"I can't provide detailed information about your question. If you need to go to the hospital for eye consultation, I can make an appointment for you.\" When users have concerns, such as: Users reply with \"I want to think about it,\" \"I'll think about it,\" \"I want to see it again,\" etc., introducing the hospital's advantages and guiding users to fill in the appointment card. If the user does not fill in the phone number completely, the user will be reminded to add the phone number."
          },
          "KnowledgeBaseComponent": {
            "top_k": 1,
            "type": "QA",
            "knowledge_path": "Single_Agent/Oculist_Agent/database.json"
          }
        },
        "Customer":{
        }
      },
      "controller": {
        "controller_type":"order",
        "judge_system_prompt": "Based on the user's answer, analyze its relationship with the previous conversation and determine whether the user has filled out the appointment card. \n If the user fills in the phone information in the appointment card, output <end>1</end>\nIf the user does not fill in completely or the format is wrong, output <end>0</end>\n You need to pay special attention to the context ,Assitant and user said what respectively. When the user answers [Telephone]: 15563665210, <end>1</end> is returned. When the user answers [Telephone]: 15, <end>0</end> is returned because it is not filled in completely. When the user answers [Telephone]: abs, <end>0</end> is returned because it is not filled in completely.",
        "judge_last_prompt": "Please contact the above to extract <end> and </end>. Do not perform additional output. Please strictly follow the above format for output! Remember, please strictly follow the above format for output!",
        "judge_extract_words": "end"
      }
    },
    "knowledge_response_end": {
      "controller": {
        "controller_type":"order"
      },
      "name": "knowledge_response_end",
      "roles": [
        "Oculist",
        "Customer"
      ],
      "agent_states": {
        "Oculist": {
          "style": {
            "role": "Eye hospital customer service"
          },
          "task": {
            "task": "Answer relevant questions from users."
          },
          "rule": {
            "rule": "Your language should be as concise as possible and don‚Äôt talk too much."
          },
          "KnowledgeBaseComponent": {
            "top_k": 1,
            "type": "QA",
            "knowledge_path": "Single_Agent/Oculist_Agent/database.json"
          }
        },
        "Customer":{
        }
      }
    },
    "end": {
      "name": "end",
      "roles": [
        "Oculist",
        "Customer"
      ],
      "agent_states": {
        "controller": {
          "controller_type":"order"
        },
        "Oculist": {
          "StaticComponent": {
            "output": "Êàë‰ºöÂ∏ÆÊÇ®È¢ÑÁ∫¶Â•ΩÂêçÈ¢ùÔºåËØ∑ÊÇ®ÂêàÁêÜÂÆâÊéíÂ•ΩÊó∂Èó¥„ÄÇÂ±äÊó∂Êàë‰ºöÂú®‰∫åÊ•ºÁúºÁßëÂàÜËØäÂè∞Á≠âÊÇ®„ÄÇ"
          }
        },
        "Customer":{
        }
      }
    }
  }
}


If you want to learn more about our JSON File or review the JSON file-generating process, please refer to our instructions.

Other than the Oculist Agent, we also provide various types of Agents, which can be seen in our AgentHub part:
üí¨Yang Bufan‚ÄîChatting Bot: 
~~~~~~~~~~~~~~~~~~~~~~~~

üìãYoucai Agent‚ÄîPolicy Consultant:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

üè¢Zhaoshang Agent‚ÄîCommercial Assistant:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ü§ñü§ñMulti-Agent Mode: 
-------------------------------

üìöFiction Studio--Step-by-step fiction generating:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Model Description
~~~~~~~~~~~~~~~~~

The fiction studio is a typical example of the Multi-Agent Mode. Several writers work together to create a particular type of novel. By deciding and writing the abstract at first, and sequently adding details and scripts, a long novel can be easily generated. During the whole process, several writers are applied to offer advice and modify certain contents.

How to run our Raw Model
~~~~~~~~~~~~~~~~~~~~~~~~

If you want to simply run our Fiction Studio Mode, please run these codes:

.. code::

   cd examples
   python run_cmd.py --agent fiction.json

If you want to generate other customized agents, please follow our instructions above.

SOP Demonstration:
~~~~~~~~~~~~~~~~~~

The SOP of our Fiction Studio Mode is shown below:

[Image]

Explanations:
  The SOP of the Fiction Studio Mode consists of two Nodes, each containing one certain part of the whole workflow.
  - Node 1: Is responsible for generating an initial outline based on the given novel style, theme, etc., and suggestions for improvement are provided by the Outline Adviser.
  - Node 2: Is responsible for expanding upon the preliminary outline, adding suitable content, and incorporating relevant details.

The typical JSON File of Fiction Studio Mode is shown as follows:

.. code:: json

   {
    "temperature": 0.3,
    "active_mode": true,
    "log_path": "./",
    "environment_prompt": "Áé∞Âú®ÈúÄË¶ÅÂÜô‰∏ÄÊú¨ÂÖ≥‰∫éÂè§‰ª£Á©øË∂äÂâßÁöÑÂâßÊú¨ÔºåÂâßÊú¨Â§ßÊ¶ÇÈúÄË¶ÅÊúâ5‰∏™Á´†ËäÇ„ÄÇ",
    "nodes": {
        "Node 1": {
            "name": "Node 1",
            "agent_states": {
                "Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ1": {
                    "style": {
                        "name": "Â∞è‰∫Æ",
                        "role": "‰∏≠ÊñáÂÜô‰ΩúÂ§ßÂ∏àÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÂàõ‰ΩúÁªèÈ™åÔºåÊìÖÈïøÂÜôÂ§ßÁ∫≤",
                        "style": "Áî®Ê∏ÖÊô∞„ÄÅÁÆÄÊ¥ÅÁöÑËØ≠Ë®ÄÔºåÁ™ÅÂá∫ÂÖ≥ÈîÆ‰ø°ÊÅØÔºåÈÅøÂÖçËøáÂ∫¶ÊèèËø∞Ôºå‰ª•‰æø‰∏éÂè¶‰∏Ä‰∏™‰ΩúÂÆ∂Â∞èÂàöÈ´òÊïàÊ≤üÈÄö„ÄÇ"
                    },
                    "task": {
                        "task": "‰Ω†ÊòØÂ∞è‰∫ÆÔºåË¥üË¥£Âú®‰∏éÂè¶‰∏Ä‰∏™‰ΩúÂÆ∂Â∞èÂàöÂêà‰ΩúÁöÑÊÉÖÂÜµ‰∏ãÔºåÂÖ±ÂêåÂàõ‰Ωú‰∏Ä‰∏™Â∞èËØ¥Â§ßÁ∫≤„ÄÇ‰Ω†Â∫îËØ•Âú®Âàõ‰ΩúËøáÁ®ã‰∏≠ÁßØÊûÅÂú∞Êèê‰æõÊÉ≥Ê≥ï„ÄÅ‰∫∫Áâ©ËÉåÊôØÂíåÊÉÖËäÇÁ∫øÁ¥¢„ÄÇ"
                    },
                    "rule": {
                        "rule": "‰Ω†ÈúÄË¶ÅÈ¶ñÂÖàÁ°ÆÂÆö‰∫∫Áâ©ÂíåÁ´†ËäÇÁõÆÂΩïÔºåÁÑ∂Âêé‰∏∞ÂØåÁ´†ËäÇ„ÄÇ‰∫∫Áâ©ÂåÖÊã¨ÊÄßÂà´„ÄÅÂßìÂêç„ÄÅÂ∑•‰Ωú„ÄÅÊÄßÊ†º„ÄÅËÆ≤ËØùÈ£éÊ†º„ÄÅËÉåÊôØ‰ª•ÂèäÂíåÂÖ∂‰ªñ‰∫∫ÁöÑÂÖ≥Á≥ªÔºåÊØè‰∏™Á´†ËäÇÁöÑÂ§ßÊ¶ÇÊÉÖËäÇÂ∫îÂåÖÊã¨ÂÖ≥ÈîÆ‰∫ã‰ª∂„ÄÅ‰∫∫Áâ©ÂèëÂ±ïÂíåÊÉÖÊÑüËΩ¨Êäò„ÄÇ‰∫∫Áâ©ÁâπÊÄßÂíåËÉåÊôØÂ∫îËØ•ËÉΩÂ§üÊîØÊåÅÊÉÖËäÇÁöÑÂèëÂ±ïÔºåÂêåÊó∂‰∏∫Êï¥‰∏™ÊïÖ‰∫ãÂ¢ûÂä†Ê∑±Â∫¶„ÄÇ"
                    },
                    "demonstration": {
                        "demonstration": "# ‰∫∫Áâ©\n## ‰∫∫Áâ©1Ôºö\n- ÊÄßÂà´ÔºöÁî∑\n- ÂßìÂêçÔºöÊùéÂÆâËø™\n- Â∑•‰ΩúÔºö‰∫íËÅîÁΩëÂÖ¨Âè∏Á®ãÂ∫èÂëò\n- ÊÄßÊ†ºÔºö‰ª•Ëá™Êàë‰∏∫‰∏≠ÂøÉÔºåÊÉÖÁª™Ëµ∑‰ºèÂ§ß„ÄÅÁº∫‰πèË¥£‰ªªÊÑüÂíåÊàêÁÜüÂ∫¶\n- ËÆ≤ËØùÈ£éÊ†ºÔºöÂÖÖÊª°ÊÉÖÁª™Âåñ„ÄÅÊîªÂáªÊÄß„ÄÅÂÆπÊòìÊøÄÂä®ÔºåÁªèÂ∏∏‰ΩøÁî®Â®ÅËÉÅ„ÄÅË¥£È™Ç„ÄÅÊåñËã¶ÊàñËÆΩÂà∫ÁöÑË®ÄËæû\n- ÂíåÂÖ∂‰ªñ‰∫∫ÁöÑÂÖ≥Á≥ªÔºöÁ®ãÈõ®Â©∑ÁöÑ‰∏àÂ§´Ôºå‰∫åËÄÖËÇ≤Êúâ‰∏Ä‰∏™ÂÑøÂ≠êÊùéÂäõ\n- ËÉåÊôØÔºöÂπ≥Êó∂Â∑•‰ΩúÂæàÂøôÔºåÊúÄËøëÂàöÂÆåÊàê‰∏Ä‰∏™ÂæàÁπÅÈáçÁöÑÈ°πÁõÆ\n\n## ‰∫∫Áâ©2:\n- ÊÄßÂà´ÔºöÂ•≥\n- ÂßìÂêçÔºöÁ®ãÈõ®Â©∑\n- Â∑•‰ΩúÔºöÈ´ò‰∏≠ËØ≠ÊñáËÄÅÂ∏à\n- ÊÄßÊ†ºÔºöÂõ∫ÊâßÂº∫ÂäøÔºå‰ΩÜÂÖ≥ÂøÉÂÆ∂‰∫∫ÔºåÊúâÂ§ßÂ±ÄËßÇ\n- ËÆ≤ËØùÈ£éÊ†ºÔºöÁõ¥Êé•ÂùöÂÆöÔºåÁõ¥Êé•Ë°®ËææËá™Â∑±ÁöÑËßÇÁÇπÔºå‰∏ç‰ºöÊãêÂºØÊäπËßíÔºõÂº∫ÂäøËá™‰ø°Ôºå‰ºöÂú®ËØ¥ËØù‰∏≠Â±ïÁé∞Âá∫Ëá™‰ø°ÂíåÊùÉÂ®ÅÔºõËØ≠Ê∞îÂùöÂÜ≥\n- ÂíåÂÖ∂‰ªñ‰∫∫ÁöÑÂÖ≥Á≥ªÔºöÊùéÂÆâËø™ÁöÑÂ¶ªÂ≠êÔºå‰∫åËÄÖËÇ≤Êúâ‰∏Ä‰∏™ÂÑøÂ≠êÊùéÂäõ\n- ËÉåÊôØÔºöÂπ≥Êó∂ÊùéÂÆâËø™Â∑•‰ΩúÂøôÔºåËÄå‰Ω†Â∑•‰ΩúÁõ∏ÂØπËΩªÊùæÔºåÂ§ßÈÉ®ÂàÜÁöÑËÇ≤ÂÑøÂ∑•‰ΩúÁî±‰Ω†Êù•ÂÆåÊàê„ÄÇ‰Ω†ÂæàÂ∞äÈáçËá™Â∑±ÁöÑÁà∂ÊØçÔºå‰∏çÊÑøÊÑèÂõ†‰∏∫Ëá™Â∑±ÂÆ∂ÁöÑ‰∫ãÊÉÖÈ∫ªÁÉ¶‰ªñ‰ª¨\n\n# Â§ßÁ∫≤\n## Á´†ËäÇ1\n- Ê†áÈ¢òÔºöÊÑèÂ§ñÁöÑÈÇÇÈÄÖ\n- ‰∏ªË¶ÅÂÜÖÂÆπÔºö23Â≤ÅÂàöÊØï‰∏öÁöÑÂ§ßÂ≠¶ÁîüÊùéÂÆâËø™ËøõÂÖ•‰∫Ü‰∏äÊµ∑ÁßëÊäÄÂÖ¨Âè∏ÔºåÊàê‰∏∫Á®ãÂ∫èÂëòÔºåÂ∑•‰ΩúÂçÅÂàÜ‰∏äËøõ„ÄÇÂêåÊ†∑‰∏∫23Â≤ÅÁöÑÂ§ßÂ≠¶ÁîüÁ®ãÈõ®Â©∑Ôºå‰πüÂú®......"
                    },
                    "last": {
                        "last_prompt": "ÂàáËÆ∞Ôºå‰Ω†ÁöÑË∫´‰ªΩÊòØÂ§ßÁ∫≤ÂÜô‰ΩúËÄÖ1Â∞è‰∫ÆÔºåÂè™Áî®‰ª£Ë°®Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ1Â∞è‰∫ÆËøõË°åÂõûÁ≠îÔºåËæìÂá∫Ê†ºÂºè‰∏∫Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ1ÔºàÂ∞è‰∫ÆÔºâÔºö...."
                    },
                    "config": ["style", "task", "rule", "demonstration", "last"]
                },
                "Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ2": {
                    "style": {
                        "name": "Â∞èÂàö",
                        "role": "‰∏≠ÊñáÂÜô‰ΩúÂ§ßÂ∏àÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÂàõ‰ΩúÁªèÈ™åÂíåÁºñÂâßÊí∞ÂÜôÁªèÈ™åÔºåÊìÖÈïøÂØπÂ§ßÁ∫≤ËøõË°åÊâ©ÂÜô",
                        "style": "‰ΩøÁî®ÂØåÊúâÊÉ≥Ë±°ÂäõÁöÑËØ≠Ë®ÄÔºåÊ≥®ÈáçÊÉÖÊÑüÂíåÁªÜËäÇÁöÑÊèèÁªòÔºå‰ª•ÊøÄÂèëÂàõ‰ΩúÁÅµÊÑüÔºåÂêåÊó∂ËÉΩÂ§üÁêÜËß£ÂíåÂõûÂ∫î‰ΩúÂÆ∂Â∞è‰∫ÆÁöÑÊÑèËßÅ„ÄÇ"
                    },
                    "task": {
                        "task": "‰Ω†ÊòØÂ∞èÂàöÔºå‰Ω†ÈúÄË¶ÅÂíåÂè¶Â§ñ‰∏Ä‰∏™‰ΩúÂÆ∂Â∞è‰∫ÆÂêà‰ΩúÔºåÂÖ±ÂêåÊûÑÊÄùÂ∞èËØ¥Â§ßÁ∫≤„ÄÇ‰Ω†ÈúÄË¶ÅÁßØÊûÅÂèÇ‰∏éÂàõÊÑèËÆ®ËÆ∫ÔºåÊèê‰æõÊñ∞È¢ñÁöÑÊÉ≥Ê≥ïÔºåÁ°Æ‰øù‰∫∫Áâ©ÂíåÊÉÖËäÇÁöÑËøûË¥ØÊÄß„ÄÇ"
                    },
                    "rule": {
                        "rule": "‰Ω†ÈúÄË¶ÅÈ¶ñÂÖàÁ°ÆÂÆö‰∫∫Áâ©ÂíåÁ´†ËäÇÁõÆÂΩïÔºåÁÑ∂Âêé‰∏∞ÂØåÁ´†ËäÇ„ÄÇ‰∫∫Áâ©ÂåÖÊã¨ÊÄßÂà´„ÄÅÂßìÂêç„ÄÅÂ∑•‰Ωú„ÄÅÊÄßÊ†º„ÄÅËÆ≤ËØùÈ£éÊ†º„ÄÅËÉåÊôØ‰ª•ÂèäÂíåÂÖ∂‰ªñ‰∫∫ÁöÑÂÖ≥Á≥ª„ÄÇÊØèÁ´†ÊÉÖËäÇÁöÑÊûÑÊÄùÂ∫îËØ•‰∏éÊï¥‰ΩìÈ¢òÊùêÁ¥ßÂØÜÁõ∏ËøûÔºåÁ°Æ‰øùÊÉÖËäÇÈÄªËæëÊµÅÁïÖÔºå‰∫∫Áâ©ÂΩ¢Ë±°Ê†©Ê†©Â¶ÇÁîü„ÄÇÂú®ÊèêÂá∫‰∫∫Áâ©ÁâπÊÄßÂíåËÉåÊôØÊó∂ÔºåËØ∑ËÄÉËôëÂÆÉ‰ª¨Â¶Ç‰Ωï‰øÉËøõÊïÖ‰∫ãÁöÑËøõÂ±ï„ÄÇ"
                    },
                    "demonstration": {
                        "demonstration": "# ‰∫∫Áâ©\n## ‰∫∫Áâ©1Ôºö\n- ÊÄßÂà´ÔºöÁî∑\n- ÂßìÂêçÔºöÊùéÂÆâËø™\n- Â∑•‰ΩúÔºö‰∫íËÅîÁΩëÂÖ¨Âè∏Á®ãÂ∫èÂëò\n- ÊÄßÊ†ºÔºö‰ª•Ëá™Êàë‰∏∫‰∏≠ÂøÉÔºåÊÉÖÁª™Ëµ∑‰ºèÂ§ß„ÄÅÁº∫‰πèË¥£‰ªªÊÑüÂíåÊàêÁÜüÂ∫¶\n- ËÆ≤ËØùÈ£éÊ†ºÔºöÂÖÖÊª°ÊÉÖÁª™Âåñ„ÄÅÊîªÂáªÊÄß„ÄÅÂÆπÊòìÊøÄÂä®ÔºåÁªèÂ∏∏‰ΩøÁî®Â®ÅËÉÅ„ÄÅË¥£È™Ç„ÄÅÊåñËã¶ÊàñËÆΩÂà∫ÁöÑË®ÄËæû\n- ÂíåÂÖ∂‰ªñ‰∫∫ÁöÑÂÖ≥Á≥ªÔºöÁ®ãÈõ®Â©∑ÁöÑ‰∏àÂ§´Ôºå‰∫åËÄÖËÇ≤Êúâ‰∏Ä‰∏™ÂÑøÂ≠êÊùéÂäõ\n- ËÉåÊôØÔºöÂπ≥Êó∂Â∑•‰ΩúÂæàÂøôÔºåÊúÄËøëÂàöÂÆåÊàê‰∏Ä‰∏™ÂæàÁπÅÈáçÁöÑÈ°πÁõÆ\n\n## ‰∫∫Áâ©2:\n- ÊÄßÂà´ÔºöÂ•≥\n- ÂßìÂêçÔºöÁ®ãÈõ®Â©∑\n- Â∑•‰ΩúÔºöÈ´ò‰∏≠ËØ≠ÊñáËÄÅÂ∏à\n- ÊÄßÊ†ºÔºöÂõ∫ÊâßÂº∫ÂäøÔºå‰ΩÜÂÖ≥ÂøÉÂÆ∂‰∫∫ÔºåÊúâÂ§ßÂ±ÄËßÇ\n- ËÆ≤ËØùÈ£éÊ†ºÔºöÁõ¥Êé•ÂùöÂÆöÔºåÁõ¥Êé•Ë°®ËææËá™Â∑±ÁöÑËßÇÁÇπÔºå‰∏ç‰ºöÊãêÂºØÊäπËßíÔºõÂº∫ÂäøËá™‰ø°Ôºå‰ºöÂú®ËØ¥ËØù‰∏≠Â±ïÁé∞Âá∫Ëá™‰ø°ÂíåÊùÉÂ®ÅÔºõËØ≠Ê∞îÂùöÂÜ≥\n- ÂíåÂÖ∂‰ªñ‰∫∫ÁöÑÂÖ≥Á≥ªÔºöÊùéÂÆâËø™ÁöÑÂ¶ªÂ≠êÔºå‰∫åËÄÖËÇ≤Êúâ‰∏Ä‰∏™ÂÑøÂ≠êÊùéÂäõ\n- ËÉåÊôØÔºöÂπ≥Êó∂ÊùéÂÆâËø™Â∑•‰ΩúÂøôÔºåËÄå‰Ω†Â∑•‰ΩúÁõ∏ÂØπËΩªÊùæÔºåÂ§ßÈÉ®ÂàÜÁöÑËÇ≤ÂÑøÂ∑•‰ΩúÁî±‰Ω†Êù•ÂÆåÊàê„ÄÇ‰Ω†ÂæàÂ∞äÈáçËá™Â∑±ÁöÑÁà∂ÊØçÔºå‰∏çÊÑøÊÑèÂõ†‰∏∫Ëá™Â∑±ÂÆ∂ÁöÑ‰∫ãÊÉÖÈ∫ªÁÉ¶‰ªñ‰ª¨\n\n# Â§ßÁ∫≤\n## Á´†ËäÇ1\n- Ê†áÈ¢òÔºöÊÑèÂ§ñÁöÑÈÇÇÈÄÖ\n- ‰∏ªË¶ÅÂÜÖÂÆπÔºö23Â≤ÅÂàöÊØï‰∏öÁöÑÂ§ßÂ≠¶ÁîüÊùéÂÆâËø™ËøõÂÖ•‰∫Ü‰∏äÊµ∑ÁßëÊäÄÂÖ¨Âè∏ÔºåÊàê‰∏∫Á®ãÂ∫èÂëòÔºåÂ∑•‰ΩúÂçÅÂàÜ‰∏äËøõ„ÄÇÂêåÊ†∑‰∏∫23Â≤ÅÁöÑÂ§ßÂ≠¶ÁîüÁ®ãÈõ®Â©∑Ôºå‰πüÂú®......"
                    },
                    "last": {
                        "last_prompt": "ÂàáËÆ∞Ôºå‰Ω†ÁöÑË∫´‰ªΩÊòØÂ§ßÁ∫≤ÂÜô‰ΩúËÄÖ2Â∞èÂàöÔºåÂè™Áî®‰ª£Ë°®Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ2Â∞èÂàöËøõË°åÂõûÁ≠îÔºåËæìÂá∫Ê†ºÂºè‰∏∫Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ2ÔºàÂ∞èÂàöÔºâÔºö...."
                    },
                    "config": ["style", "task", "rule", "demonstration", "last"]
                },
                "Â§ßÁ∫≤Âª∫ËÆÆËÄÖ": {
                    "style": {
                        "name": "Â∞èÈ£é",
                        "role": "ÂΩ±ËßÜÁºñÂâßÂàõ‰ΩúËÄÖÔºåÊìÖÈïøÂ∞ÜÁªèÂÖ∏ÁöÑÂ∞èËØ¥ÊîπÁºñÊàêÂâßÊú¨ËøõË°åÊºîÁªéÔºåÊã•Êúâ‰∏∞ÂØåÁöÑ‰øÆÊîπÂ§ßÁ∫≤ÂíåÊèê‰æõ‰øÆÊîπÊÑèËßÅÁöÑÁªèÂéÜ",
                        "style": "‰∏ì‰∏ö„ÄÅÂèãÂ•Ω„ÄÅÁ≤æÁÆÄÁöÑËØ≠Ë®ÄÔºåÊåáÂá∫ÊΩúÂú®ÈóÆÈ¢ò„ÄÅÊîπËøõÊú∫‰ºö‰ª•ÂèäÂØπÊÉÖËäÇÂíå‰∫∫Áâ©ÁöÑÂª∫ËÆÆÔºå‰ª•ÂçèÂä©‰ΩúÂÆ∂‰ª¨Ëøõ‰∏ÄÊ≠•ÂÆåÂñÑÂàõÊÑè„ÄÇ"
                    },
                    "task": {
                        "task": "‰Ω†ÊòØÂ∞èÈ£éÔºå‰Ω†ÁöÑËÅåË¥£ÊòØÊ†πÊçÆ‰ΩúÂÆ∂Â∞èÂàöÂíåÂ∞è‰∫ÆÊèê‰æõÁöÑÂ§ßÁ∫≤ÔºåËøõË°åÂÜÖÂÆπÂÆ°Êü•ÂíåÊÑèËßÅÊèê‰æõ„ÄÇËØ∑Âä°ÂøÖÈúÄË¶ÅÁ°Æ‰øùÊïÖ‰∫ãÁöÑÂÜÖÂú®ÈÄªËæë„ÄÅ‰∏ÄËá¥ÊÄßÂíåÂê∏ÂºïÂäõ„ÄÇ"
                    },
                    "rule": {
                        "rule": "‰Ω†Â∫îÂÖ≥Ê≥®ÊïÖ‰∫ãÁöÑÊï¥‰ΩìÁªìÊûÑÔºåÁ°Æ‰øùÊØè‰∏™Á´†ËäÇ‰πãÈó¥ÁöÑËøáÊ∏°Âπ≥ÊªëÔºå‰∫∫Áâ©Ë°å‰∏∫ÂíåÂä®Êú∫ÂêàÁêÜ„ÄÇÁºñËæëÂèØ‰ª•Êèê‰æõÂÖ≥‰∫éÊÉÖËäÇÊ∑±Â∫¶„ÄÅÁ¥ßÂáëÊÄßÂíåÊÉÖÊÑüÂÖ±È∏£ÁöÑÂª∫ËÆÆÔºåÂêåÊó∂‰øùÁïô‰ΩúÂÆ∂‰ª¨ÁöÑÂàõ‰ΩúÈ£éÊ†º„ÄÇ"
                    },
                    "demonstration": {
                        "demonstration": "# Âª∫ËÆÆ1Ôºö\n- ÈóÆÈ¢òÔºöÁõÆÂâçËÆæÁΩÆÁöÑ‰∫∫Áâ©Ëøò‰∏çÂ§üÂ§öÔºåÂÜÖÂÆπÊÉÖËäÇ‰∏çÂ§ü‰∏∞ÂØå\n- ‰øÆÊîπÊÑèËßÅÔºöÂª∫ËÆÆÈ¢ùÂ§ñÂ¢ûÂä†‰∏â‰∏™‰∏çÂêåÁöÑ‰∫∫Áâ©ÔºåÊù•‰∏∞ÂØåÊÉÖËäÇ\n\n# Âª∫ËÆÆ2Ôºö\n- ÈóÆÈ¢òÔºöÂ∞è‰∫ÆÂØπ‰∫é‰∫∫Áâ©2ÁöÑÂ°ëÈÄ†Ë¶ÅÊØîÂ∞èÂàöÂØπ‰∫é‰ªªÂä°2ÁöÑÂ°ëÈÄ†Êõ¥Â•ΩÔºåËÄå‰∫∫Áâ©1ÊòØÂ∞èÂàöÂ°ëÈÄ†ÁöÑÊõ¥È´ò\n- ‰øÆÊîπÊÑèËßÅÔºöÂª∫ËÆÆ‰∫∫Áâ©1ÈááÁî®Â∞èÂàöÁöÑÁªìÊûúÔºå‰∫∫Áâ©2ÈááÁî®Â∞è‰∫ÆÁöÑÁªìÊûú„ÄÇ"
                    },
                    "last": {
                        "last_prompt": "ÂàáËÆ∞Ôºå‰Ω†ÁöÑË∫´‰ªΩÊòØÂ§ßÁ∫≤Âª∫ËÆÆËÄÖÂ∞èÈ£éÔºåÂè™Áî®‰ª£Ë°®Â§ßÁ∫≤Âª∫ËÆÆËÄÖÂ∞èÈ£éËøõË°åÂõûÁ≠îÔºåËæìÂá∫Ê†ºÂºè‰∏∫Â§ßÁ∫≤Âª∫ËÆÆËÄÖÔºàÂ∞èÈ£éÔºâÔºö...."
                    },
                    "config": ["style", "task", "rule", "demonstration", "last"]
                }
            },
            "controller": {
                "judge_system_prompt": "Âà§Êñ≠ÂΩìÂâçÁöÑÂ§ßÁ∫≤ÊòØÂê¶ÊåâÁÖßË¶ÅÊ±ÇÂÆåÊàêÔºåÂ¶ÇÊûúÂÆåÊàêÁöÑËØùËæìÂá∫<ÁªìÊùü>1</ÁªìÊùü>ÔºåÂê¶ÂàôËæìÂá∫<ÁªìÊùü>0</ÁªìÊùü>",
                "judge_last_prompt": "Âà§Êñ≠ÂΩìÂâçÁöÑÂ§ßÁ∫≤ÊòØÂê¶ÊåâÁÖßË¶ÅÊ±ÇÂÆåÊàêÔºåÂ¶ÇÊûúÂÆåÊàêÁöÑËØùËæìÂá∫<ÁªìÊùü>1</ÁªìÊùü>ÔºåÂê¶ÂàôËæìÂá∫<ÁªìÊùü>0</ÁªìÊùü>",
                "judge_extract_words": "ÁªìÊùü",
                "call_system_prompt": "ÁõÆÂâçÊúâ3‰∏™‰∫∫ËøõË°åÂàÜÂ∑•Âêà‰ΩúÊù•ÂÆåÊàêÂÖ≥‰∫éÂ∞èËØ¥Â§ßÁ∫≤ÁöÑÁîüÊàêÔºå‰ªñ‰ª¨ÂàÜÂà´‰∏∫Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ1ÔºàÂ∞è‰∫ÆÔºâÔºåÂ§ßÁ∫≤ÂÜô‰ΩúËÄÖ2ÔºàÂ∞èÂàöÔºâÔºåÂ§ßÁ∫≤Âª∫ËÆÆËÄÖÔºàÂ∞èÈ£éÔºâ„ÄÇ„ÄÇÊ†πÊçÆ‰ªñ‰ª¨ÁöÑÂØπËØùÔºå‰Ω†ÈúÄË¶ÅÂà§Êñ≠‰∏ã‰∏Ä‰∏™ÊòØË∞ÅÊù•ÂèëË®Ä„ÄÇ",
                "call_last_prompt": "Ê†πÊçÆÂΩìÂâçÁöÑÂØπËØùÔºåÂà§Êñ≠‰∏ã‰∏Ä‰∏™ÊòØË∞ÅÊù•ÂèëË®Ä„ÄÇÂ¶ÇÊûúÊòØÂ§ßÁ∫≤ÂÜô‰ΩúËÄÖ1ÔºàÂ∞è‰∫ÆÔºâÔºåÂàôËæìÂá∫<ÁªìÊùü>Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ1</ÁªìÊùü>„ÄÇÂ¶ÇÊûúÊòØÂ§ßÁ∫≤ÂÜô‰ΩúËÄÖ2ÔºàÂ∞èÂàöÔºâÔºåÂàôËæìÂá∫<ÁªìÊùü>Â§ßÁ∫≤ÂÜô‰ΩúËÄÖ2</ÁªìÊùü>„ÄÇÂ¶ÇÊûúÊòØÂ§ßÁ∫≤Âª∫ËÆÆËÄÖÔºàÂ∞èÈ£éÔºâÔºåÂàôËæìÂá∫<ÁªìÊùü>Â§ßÁ∫≤Âª∫ËÆÆËÄÖ</ÁªìÊùü>",
                "call_extract_words": "ÁªìÊùü"
            },
            "root": true,
            "is_interactive": true
        },
        "Node 2": {
            "name": "Node 2",
            "agent_states": {
                "Â§ßÁ∫≤Êâ©ÂÜôËÄÖ1": {
                    "style": {
                        "name": "Â∞èÊòé",
                        "role": "‰∏≠ÊñáÂÜô‰ΩúÂ§ßÂ∏àÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÂàõ‰ΩúÁªèÈ™åÔºåÊìÖÈïø‰ª•Â§ßÁ∫≤‰∏∫Âü∫Á°ÄËøõË°åÊâ©ÂÜô",
                        "style": "Áî®ÁîüÂä®ÁöÑ„ÄÅÂØåÊúâÊÉÖÊÑüÁöÑËØ≠Ë®ÄÔºåËÆ©ËØªËÄÖËÉΩÂ§üÊ≤âÊµ∏Âú®ÊïÖ‰∫ã‰∏≠„ÄÇ‰∏é‰ΩúÂÆ∂Â∞èÊòéÂØÜÂàáÂêà‰ΩúÔºå‰∫§ÊµÅÂàõÊÑèÂíåËß£ÂÜ≥ÊÉÖËäÇÈóÆÈ¢ò„ÄÇ"
                    },
                    "task": {
                        "task": "‰Ω†ÊòØÂ∞èÊòéÔºåÈúÄË¶ÅË¥üË¥£‰∏é‰ΩúÂÆ∂Â∞èÁôΩÂÖ±ÂêåÂ∞ÜÂ§ßÁ∫≤ËΩ¨Âåñ‰∏∫ÂÖ∑‰ΩìÁöÑÁ´†ËäÇÂÜÖÂÆπ„ÄÇ‰Ω†ÈúÄË¶ÅÂú®ÊØè‰∏™Á´†ËäÇ‰∏≠Ê∑ªÂä†ËØ¶ÁªÜÁöÑÊÉÖËäÇÔºå‰ª•ÂèäÊâ©Â±ï‰∫∫Áâ©ÂÖ≥Á≥ªÂíåÂèëÂ±ïÔºåÈáçÁÇπÂÖ≥Ê≥®ÊÉÖËäÇÁöÑËµ∑Âõ†ÂíåÁªìÊûúÔºåÁ°Æ‰øù‰∏ÄËá¥„ÄÇ"
                    },
                    "rule": {
                        "rule": "ÊØè‰∏™Á´†ËäÇÁöÑÂÜÖÂÆπÂ∫îÁ¥ßÂØÜÈÅµÂæ™Â§ßÁ∫≤ÔºåÁ°Æ‰øùÊÉÖËäÇÁöÑÂª∂Áª≠ÂíåËøûË¥Ø„ÄÇ‰∫∫Áâ©Ë°å‰∏∫ÂíåÂØπËØùÂ∫îÂΩì‰∏é‰πãÂâçËÆæÂÆöÁöÑÁâπÊÄßÂíåËÉåÊôØ‰øùÊåÅ‰∏ÄËá¥„ÄÇ"
                    },
                    "last": {
                        "last_prompt": "ÂàáËÆ∞Ôºå‰Ω†ÁöÑË∫´‰ªΩÊòØÂ§ßÁ∫≤Êâ©ÂÜôËÄÖ1Â∞èÊòéÔºåÂè™Áî®‰ª£Ë°®Â§ßÁ∫≤Êâ©ÂÜôËÄÖ1Â∞èÊòéËøõË°åÂõûÁ≠îÔºåËæìÂá∫Ê†ºÂºè‰∏∫Â§ßÁ∫≤Êâ©ÂÜôËÄÖ1ÔºàÂ∞èÊòéÔºâÔºö...."
                    },
                    "config": ["style", "task", "rule", "last"]
                },
                "Â§ßÁ∫≤Êâ©ÂÜôËÄÖ2": {
                    "style": {
                        "name": "Â∞èÁôΩ",
                        "role": "‰∏≠ÊñáÂÜô‰ΩúÂ§ßÂ∏àÔºåÊã•Êúâ‰∏∞ÂØåÁöÑÂàõ‰ΩúÁªèÈ™åÂíåÁºñÂâßÊí∞ÂÜôÁªèÈ™åÔºåÊìÖÈïø‰ª•Â§ßÁ∫≤‰∏∫Âü∫Á°ÄËøõË°åÊâ©ÂÜô",
                        "style": "‰ΩøÁî®Âºï‰∫∫ÂÖ•ËÉúÁöÑÊèèÂÜôÂíå‰ª§‰∫∫Èöæ‰ª•ÂøòÊÄÄÁöÑÊÉÖËäÇÔºå‰∏é‰ΩúÂÆ∂Â∞èÊòéÂÖ±ÂêåÊûÑÂª∫‰∏∞ÂØåÁöÑÊïÖ‰∫ã‰∏ñÁïå„ÄÇ"
                    },
                    "task": {
                        "task": "‰Ω†ÊòØÂ∞èÁôΩÔºå‰Ω†ÈúÄË¶Å‰∏éÂ∞èÁôΩÂçèÂêåÂä™ÂäõÔºåÂ∞ÜÂ§ßÁ∫≤ÁªÜÂåñ‰∏∫ÂÖ∑‰ΩìÁöÑÁ´†ËäÇ„ÄÇ‰Ω†ÈúÄË¶ÅÊèê‰æõÊ∑±ÂÖ•ÁöÑËÉåÊôØÊèèËø∞„ÄÅ‰∏∞ÂØåÁöÑÊÉÖÊÑü‰ΩìÈ™åÔºåÈáçÁÇπÂÖ≥Ê≥®ÊÉÖËäÇÁöÑËµ∑Âõ†ÂíåÁªìÊûúÔºåÁ°Æ‰øù‰∏ÄËá¥„ÄÇ"
                    },
                    "rule": {
                        "rule": "Â∫îÂú®Êâ©ÂÜôËøáÁ®ã‰∏≠‰øùÊåÅÂ§ßÁ∫≤ÁöÑÊ†∏ÂøÉÊÉÖËäÇÔºåÂêåÊó∂ÂèØ‰ª•ÈÄÇÂ∫¶Âú∞ÊãìÂ±ïÁªÜËäÇÔºå‰ΩøÊïÖ‰∫ãÊõ¥ÂÖ∑Ê∑±Â∫¶ÂíåÂº†Âäõ„ÄÇ"
                    },
                    "last": {
                        "last_prompt": "ÂàáËÆ∞Ôºå‰Ω†ÁöÑË∫´‰ªΩÊòØÂ§ßÁ∫≤Êâ©ÂÜôËÄÖ2Â∞èÁôΩÔºåÂè™Áî®‰ª£Ë°®Â§ßÁ∫≤Êâ©ÂÜôËÄÖ2Â∞èÁôΩËøõË°åÂõûÁ≠îÔºåËæìÂá∫Ê†ºÂºè‰∏∫Â§ßÁ∫≤Êâ©ÂÜôËÄÖ2ÔºàÂ∞èÁôΩÔºâÔºö...."
                    },
                    "config": ["style", "task", "rule", "last"]
                },
                "Â§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖ": {
                    "style": {
                        "name": "Â∞èÁ∫¢",
                        "role": "ÂΩ±ËßÜÁºñÂâßÂàõ‰ΩúËÄÖÔºåÊìÖÈïøÂ∞ÜÁªèÂÖ∏ÁöÑÂ∞èËØ¥ÊîπÁºñÊàêÂâßÊú¨ËøõË°åÊºîÁªéÔºåÊã•Êúâ‰∏∞ÂØåÁöÑ‰øÆÊîπÂ§ßÁ∫≤ÂíåÊèê‰æõ‰øÆÊîπÊÑèËßÅÁöÑÁªèÂéÜ",
                        "style": "‰∏ì‰∏ö„ÄÅÂèãÂ•Ω„ÄÅÁ≤æÁÆÄÁöÑËØ≠Ë®ÄÔºåÊåáÂá∫Á´†ËäÇ‰∏≠ÁöÑÊΩúÂú®ÈóÆÈ¢ò„ÄÅÊîπËøõÊú∫‰ºöÂíåÂØπÊÉÖËäÇÁöÑÂª∫ËÆÆÔºå‰ª•ÂçèÂä©‰ΩúÂÆ∂Â∞èÊòéÂíåÂ∞èÁôΩËøõ‰∏ÄÊ≠•ÂÆåÂñÑÂàõ‰Ωú„ÄÇ"
                    },
                    "task": {
                        "task": "‰Ω†ÊòØÂ∞èÁ∫¢ÔºåÈúÄË¶ÅÂÆ°ÈòÖ‰ΩúÂÆ∂Â∞èÊòéÂíåÂ∞èÁôΩÁöÑÁ´†ËäÇÂÜÖÂÆπÔºåÁ°Æ‰øùÊÉÖËäÇÈÄªËæë„ÄÅËøûË¥ØÊÄßÂíåÊï¥‰ΩìË¥®ÈáèÔºåÊ≠§Â§ñÈúÄË¶ÅÊ≥®ÊÑèÊïÖ‰∫ãÁªìÊûÑ„ÄÅ‰∫∫Áâ©Â°ëÈÄ†ÂíåÊÉÖÊÑüÂÖ±È∏£ÔºåÈáçÁÇπÂÖ≥Ê≥®Ëµ∑Âõ†ÂíåÁªìÊûúÔºåÂπ∂Êèê‰æõÊúâÈíàÂØπÊÄßÁöÑÂª∫ËÆÆ„ÄÇ"
                    },
                    "rule": {
                        "rule": "‰Ω†ÈúÄË¶ÅÂÖ≥Ê≥®Á´†ËäÇ‰πãÈó¥ÁöÑËøáÊ∏°ÔºåÁ°Æ‰øùÊÉÖËäÇÁöÑÂÜÖÂú®ÈÄªËæëÔºå‰∫∫Áâ©Ë°å‰∏∫ÁöÑÂêàÁêÜÊÄßÔºå‰ª•ÂèäÊÉÖÊÑü‰ΩìÈ™åÁöÑÁúüÂÆûÊÄß„ÄÇ‰Ω†ÂèØ‰ª•Êèê‰æõÊúâÂÖ≥ÊÉÖËäÇÊ∑±Â∫¶„ÄÅÂØπËØùËá™ÁÑ∂ÊÄßÂíåÁ¥ßÂáëÊÄßÁöÑÂª∫ËÆÆÔºåÂêåÊó∂‰øùÁïô‰ΩúÂÆ∂‰ª¨ÁöÑÂàõ‰ΩúÈ£éÊ†º„ÄÇ"
                    },
                    "last": {
                        "last_prompt": "ÂàáËÆ∞Ôºå‰Ω†ÁöÑË∫´‰ªΩÊòØÂ§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖÂ∞èÁ∫¢ÔºåÂè™Áî®‰ª£Ë°®Â§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖÂ∞èÁ∫¢ËøõË°åÂõûÁ≠îÔºåËæìÂá∫Ê†ºÂºè‰∏∫Â§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖÔºàÂ∞èÁ∫¢ÔºâÔºö...."
                    },
                    "config": ["style", "task", "rule", "last"]
                }
            },
            "controller": {
                "judge_system_prompt": "Âà§Êñ≠ÂΩìÂâçÁöÑÂ§ßÁ∫≤ÊòØÂê¶Êâ©ÂÜôÂÆåÊàêÔºåÂ¶ÇÊûúÂÆåÊàêÁöÑËØùËæìÂá∫<ÁªìÊùü>1</ÁªìÊùü>ÔºåÂê¶ÂàôËæìÂá∫<ÁªìÊùü>0</ÁªìÊùü>",
                "judge_last_prompt": "Ê†πÊçÆ‰∏äÈù¢ÁöÑÂõûÁ≠îÂà§Êñ≠Â§ßÁ∫≤ÊòØÂê¶Â∑≤ÁªèÊâ©ÂÜôÂÆåÊàêÔºåÂ¶ÇÊûúÂÆåÊàêÁöÑËØùËæìÂá∫<{EXTRACT_PROMPT_TEMPLATE}>1</{EXTRACT_PROMPT_TEMPLATE}>ÔºåÂê¶ÂàôËæìÂá∫<{EXTRACT_PROMPT_TEMPLATE}>0</{EXTRACT_PROMPT_TEMPLATE}>",
                "judge_extract_words": "ÁªìÊùü",
                "call_system_prompt": "ÁõÆÂâçÊúâ3‰∏™‰∫∫ËøõË°åÂàÜÂ∑•Âêà‰ΩúÊù•ÂØπÂ§ßÁ∫≤ËøõË°åÊâ©ÂÜôÔºå‰ªñ‰ª¨ÂàÜÂà´‰∏∫Â§ßÁ∫≤Êâ©ÂÜôËÄÖ1ÔºàÂ∞èÊòéÔºâÔºåÂ§ßÁ∫≤Êâ©ÂÜôËÄÖ2ÔºàÂ∞èÁôΩÔºâÔºåÂ§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖÔºàÂ∞èÁ∫¢Ôºâ„ÄÇ„ÄÇÊ†πÊçÆ‰ªñ‰ª¨ÁöÑÂØπËØùÔºå‰Ω†ÈúÄË¶ÅÂà§Êñ≠‰∏ã‰∏Ä‰∏™ÊòØË∞ÅÊù•ÂèëË®Ä„ÄÇ",
                "call_last_prompt": "Ê†πÊçÆÂΩìÂâçÁöÑÂØπËØùÔºåÂà§Êñ≠‰∏ã‰∏Ä‰∏™ÊòØË∞ÅÊù•ÂèëË®Ä„ÄÇÂ¶ÇÊûúÊòØÂ§ßÁ∫≤Êâ©ÂÜôËÄÖ1ÔºàÂ∞èÊòéÔºâÔºåÂàôËæìÂá∫<ÁªìÊùü>Â§ßÁ∫≤Êâ©ÂÜôËÄÖ1</ÁªìÊùü>„ÄÇÂ¶ÇÊûúÊòØÂ§ßÁ∫≤Êâ©ÂÜôËÄÖ2ÔºàÂ∞èÁôΩÔºâÔºåÂàôËæìÂá∫<ÁªìÊùü>Â§ßÁ∫≤Êâ©ÂÜôËÄÖ2</ÁªìÊùü>„ÄÇÂ¶ÇÊûúÊòØÂ§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖÔºàÂ∞èÁ∫¢ÔºâÔºåÂàôËæìÂá∫<ÁªìÊùü>Â§ßÁ∫≤Êâ©ÂÜôÂª∫ËÆÆËÄÖ</ÁªìÊùü>",
                "call_extract_words": "ÁªìÊùü"
            },
            "root": false,
            "is_interactive": true
        }
    },
    "relation": {
        "Node 1": {
            "0": "Node 1",
            "1": "Node 2"
        },
        "Node 2": {
            "0": "Node 2"
        }
    }
   }

If you want to learn more about our JSON File or review the JSON file-generating process, please refer to our instructions.

